{"version":3,"sources":["axios.js","reuests.js","Banner.js","Nav.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentariesMovies","Banner","str","n","useState","movie","setmovie","useEffect","a","get","request","console","log","data","results","Math","floor","random","length","fetchData","table","className","style","backgroundSize","backgroundImage","poster_path","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setmovies","trailerUrl","settrailerUrl","animals","map","key","id","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","Object","keys","catch","error","handleClick","videoId","opts","height","width","playerVars","autoplay","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4e5b6971.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance= axios.create({\r\nbaseURL:\"https://api.themoviedb.org/3\",\r\n\r\n\r\n});\r\n\r\n\r\nexport default instance;","const API_KEY=\"6b508ae2ea74dbd73050c230d8bc6f9d\";\r\n\r\nconst requests={\r\n\r\nfetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\nfetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=123`,\r\nfetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\nfetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\nfetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\nfetchDocumentariesMovies:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport './Banner.css';\r\nimport requests from './reuests';\r\n\r\n\r\n\r\nfunction Banner() {\r\nconst  [movie, setmovie] =  useState([]);\r\n/* const base_url=\"https://image.tmdb.org/t/p/original/\"; */\r\n\r\nuseEffect(() => {\r\nasync function fetchData(){\r\nconst request = await axios.get(requests.fetchTrending);\r\nconsole.log(request.data.results[Math.floor(Math.random() * request.data.results.length -1)])\r\nsetmovie(request.data.results[Math.floor(Math.random() * request.data.results.length -1)]);\r\n//console.log(request);\r\nreturn request;\r\n}  fetchData();\r\n}, [])\r\n\r\nconsole.table(movie)\r\nfunction truncate(str,n){\r\nreturn str?.length > n ? str.substr(0, n-1)+ \"...\" : str;\r\n\r\n}\r\n\r\n\r\n    return (\r\n        <header \r\n         className=\"banner\" \r\n         style={{\r\n        backgroundSize:\"cover\",\r\n        backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.poster_path || movie?.backdrop_path}\")`,\r\n         backgroundPosition:\"center center\",\r\n          }}\r\n         >\r\n         <div className=\"banner_contents\">\r\n          <h1 className=\"banner_title\">\r\n            {movie?.title || movie?.name || movie?.original_name}\r\n         </h1>\r\n\r\n        <div className=\"banner_buttons\">\r\n        <button className=\"banner_button\">Play</button> \r\n        <button className=\"banner_button\"> My List</button>\r\n        </div>\r\n\r\n\r\n         <h1 className=\"banner_description\"> \r\n           {truncate(movie?.overview, 150)}\r\n        </h1>\r\n\r\n         </div>\r\n         \r\n\r\n          <div className=\"banner-fadeBottom\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\nconst [show, handleShow] = useState(false)\r\n\r\nuseEffect(() => {\r\n window.addEventListener(\"scroll\", () => {\r\nif(window.scrollY >100){\r\nhandleShow(true);\r\n}else handleShow(false);\r\n}) ;\r\n\r\nreturn ()=>{\r\nwindow.removeEventListener(\"scroll\");\r\n\r\n}; \r\n\r\n}, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n          <img\r\n          className=\"nav_logo\"  \r\n          src=\"/image/deshiflix1.jpg\" alt=\"Netflix Logo\"/>\r\n\r\n        <img\r\n          className=\"nav_avatar\"  \r\n          src=\"/image/smilyface.jpg\" alt=\"Netflix Logo\"/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import movieTrailer from 'movie-trailer';\r\nimport React, { useEffect, useState } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n\r\nconst  [movies, setmovies] =  useState([]);\r\nconst [trailerUrl, settrailerUrl]= useState(\"\");\r\n\r\nuseEffect(() => {\r\nasync function fetchData(){\r\nconst request = await axios.get(fetchUrl)\r\nsetmovies(request.data.results);\r\n//console.log(request);\r\nreturn request;\r\n}  fetchData();\r\n}, [fetchUrl])\r\n\r\n\r\nconst opts={\r\nheight: \"390\",\r\nwidth:\"100%\",\r\nplayerVars: {\r\n\r\nautoplay:1,\r\n},\r\n\r\n};\r\n\r\nconst  animals = {\r\n    'cat': 'qbN7DtPAKQo',\r\n    'dog': 'qggx-7o5cqU',\r\n    'cow': 'bS-HMwdt6AE?t=70',\r\n    'a'  :'eirmiouZsE4',\r\n 'B'  :'4CikNRsHKhs',\r\n 'C'  :'zaCbuB3w0kg',\r\n 'D'  :'ZPSUimDt7N8',\r\n 'E'  :'2jgkVWMNIq8',\r\n 'F'  :'61l74K5ZRdA',\r\n 'G'  :'mCKxEOnzQug',\r\n   \r\n};\r\nconst handleClick=(movie) =>{\r\nif (trailerUrl) {\r\nsettrailerUrl(\"\");\r\n} else{\r\n\r\nmovieTrailer(movie?.name || \"\")\r\n.then((url) =>{\r\nconst urlParams= new URLSearchParams(new URL(url).search);\r\n \r\nsettrailerUrl(urlParams.get(\"v\")) ||  settrailerUrl(animals[Object.keys(animals)[Math.floor(Math.random()*Object.keys(animals).length)]]);\r\n\r\n}).catch(error => console.log(error))\r\n\r\n};\r\n  settrailerUrl(animals[Object.keys(animals)[Math.floor(Math.random()*Object.keys(animals).length)]]);  \r\n\r\n}\r\n\r\n\r\n\r\n  /* console.table(movies); */\r\n\r\n    return (\r\n        <div className=\"row\">\r\n           <h2>{title}</h2> \r\n\r\n        <div className=\"row_posters\">\r\n        \r\n\r\n           {movies.map((movie) => (\r\n           \r\n           <img \r\n            key={movie.id}\r\n             onClick={() =>  handleClick(movie)} \r\n             className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\r\n             src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n             alt={movie.name}/>\r\n               \r\n           ))}\r\n        </div>\r\n       {trailerUrl &&  <YouTube videoId={trailerUrl} opts={opts} />}\r\n \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\nimport './App.css';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport requests from './reuests';\nimport Row from './Row';\nfunction App() {\n  return (\n    <div className=\"app\">\n\n      <Nav/>\n      <Banner/>\n      {/*    //banner */}\n        <div className=\"heading\">Bangladeshi  Movie Bazar <small>  বাবু খাইছো  -Dedicated to -Farhan vai</small></div>\n          <Row title=\"Top Rated Movie- Yub Uddin\" \n          fetchUrl={requests.fetchTopRated}\n           isLargeRow={true} />\n          <Row title=\"Trending NOW\" fetchUrl={requests.fetchTrending}/>\n     \n        <Row title=\"Action Movie\" fetchUrl={requests.fetchActionMovies}/>  \n         <Row title=\"Comedy Movie\" fetchUrl={requests.fetchComedyMovies}/>\n          <Row title=\"Horror Movie\" fetchUrl={requests.fetchHorrorMovies}/>\n           <Row title=\"Romance Deshi Movie\" fetchUrl={requests.fetchRomanceMovies}/>\n            <Row title=\"Documentaries Movie\" fetchUrl={requests.fetchDocumentariesMovies}/>  \n             <Row title=\"Deshi Hindi Bangla Movie\" fetchUrl={requests.fetchRomanceMovies}/> \n   <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}/>     \n           \n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}